:remote connect tinkerpop.server conf/remote.yaml
:remote console

mgmt = graph.openManagement();inode_operation = mgmt.makeVertexLabel('inode_operation').make();i_o_id = mgmt.makePropertyKey('i_o_id').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make();i_o_name = mgmt.makePropertyKey('i_o_name').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make();i_o_time = mgmt.makePropertyKey('i_o_time').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make();mgmt.addProperties(inode_operation, i_o_id, i_o_name, i_o_time);mgmt.buildIndex('byInodeOperationId', Vertex.class).addKey(i_o_id).buildCompositeIndex();mgmt.commit();ManagementSystem.awaitGraphIndexStatus(graph, 'byInodeOperationId').status(SchemaStatus.ENABLED).call();
mgmt = graph.openManagement(); project = mgmt.makeVertexLabel('project').make();p_id = mgmt.makePropertyKey('p_id').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make();p_name = mgmt.makePropertyKey('p_name').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make();mgmt.addProperties(project, p_id, p_name);mgmt.buildIndex('byProjectId', Vertex.class).addKey(p_id).buildCompositeIndex();mgmt.commit();ManagementSystem.awaitGraphIndexStatus(graph, 'byProjectId').status(SchemaStatus.ENABLED).call();
mgmt = graph.openManagement(); dataset = mgmt.makeVertexLabel('dataset').make(); d_id = mgmt.makePropertyKey('d_id').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make(); d_name = mgmt.makePropertyKey('d_name').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make(); mgmt.addProperties(dataset, d_id, d_name);mgmt.buildIndex('byDatasetId', Vertex.class).addKey(d_id).buildCompositeIndex();mgmt.commit();ManagementSystem.awaitGraphIndexStatus(graph, 'byDatasetId').status(SchemaStatus.ENABLED).call();
mgmt = graph.openManagement(); file = mgmt.makeVertexLabel('inode').make(); i_id = mgmt.makePropertyKey('i_id').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make(); i_name = mgmt.makePropertyKey('i_name').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make(); mgmt.addProperties(file, i_id, i_name);mgmt.buildIndex('byInodeId', Vertex.class).addKey(i_id).buildCompositeIndex();mgmt.commit();ManagementSystem.awaitGraphIndexStatus(graph, 'byInodeId').status(SchemaStatus.ENABLED).call();
mgmt = graph.openManagement(); user = mgmt.makeVertexLabel('user').make(); u_id = mgmt.makePropertyKey('u_id').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make(); mgmt.addProperties(user, u_id);mgmt.buildIndex('byUserId', Vertex.class).addKey(u_id).buildCompositeIndex();mgmt.commit();ManagementSystem.awaitGraphIndexStatus(graph, 'byUserId').status(SchemaStatus.ENABLED).call();
mgmt = graph.openManagement(); time_hour = mgmt.makeVertexLabel('time_hour').make(); hour = mgmt.makePropertyKey('hour').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make(); mgmt.addProperties(time_hour, hour); time_date = mgmt.makeVertexLabel('time_date').make(); date = mgmt.makePropertyKey('date').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make(); mgmt.addProperties(time_date, date);mgmt.buildIndex('byDate', Vertex.class).addKey(date).buildCompositeIndex();mgmt.commit();ManagementSystem.awaitGraphIndexStatus(graph, 'byDate').status(SchemaStatus.ENABLED).call();
mgmt = graph.openManagement();application = mgmt.makeVertexLabel('application').make();a_id = mgmt.makePropertyKey('a_id').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make();a_name = mgmt.makePropertyKey('a_name').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make();mgmt.addProperties(application, a_id, a_name);mgmt.buildIndex('byApplicationId', Vertex.class).addKey(a_id).buildCompositeIndex();mgmt.commit();ManagementSystem.awaitGraphIndexStatus(graph, 'byApplicationId').status(SchemaStatus.ENABLED).call();
mgmt = graph.openManagement();app_state_operation = mgmt.makeVertexLabel('app_state_operation').make();a_state = mgmt.makePropertyKey('a_state').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make();a_time = mgmt.makePropertyKey('a_time').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make();mgmt.addProperties(app_state_operation, a_state, a_time);mgmt.buildIndex('byAppStateName', Vertex.class).addKey(a_state).buildCompositeIndex();mgmt.commit();ManagementSystem.awaitGraphIndexStatus(graph, 'byAppStateName').status(SchemaStatus.ENABLED).call();
mgmt = graph.openManagement();mgmt.getGraphIndexes(Vertex.class); mgmt.commit();